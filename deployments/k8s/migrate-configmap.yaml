apiVersion: v1
kind: ConfigMap
metadata:
  name: migrate-configmap
data:
  000001_init_accounts.up.sql: |
    CREATE EXTENSION IF NOT EXISTS pgcrypto;

    CREATE TABLE accounts
    (
        uuid       UUID      NOT NULL DEFAULT gen_random_uuid(),
        login      VARCHAR   NOT NULL,
        password   VARCHAR   NOT NULL,
        created_at TIMESTAMP NOT NULL DEFAULT NOW(),
        updated_at TIMESTAMP NOT NULL DEFAULT NOW(),
        PRIMARY KEY (uuid)
    );

    CREATE OR REPLACE FUNCTION update_updated_at()
        RETURNS TRIGGER AS
    $$
    BEGIN
        NEW.updated_at = NOW();
        RETURN NEW;
    END;
    $$ LANGUAGE plpgsql;

    CREATE TRIGGER update_accounts_updated_at
        BEFORE UPDATE
        ON accounts
        FOR EACH ROW
    EXECUTE FUNCTION update_updated_at();

  000001_init_accounts.down.sql: |
    DROP TRIGGER IF EXISTS update_accounts_updated_at ON accounts;
    DROP FUNCTION IF EXISTS update_updated_at();
    DROP TABLE IF EXISTS accounts;

  000002_init_tasks.up.sql: |
    CREATE EXTENSION IF NOT EXISTS pgcrypto;

    CREATE TABLE tasks
    (
        uuid       UUID      NOT NULL DEFAULT gen_random_uuid(),
        name       VARCHAR   NOT NULL,
        text       VARCHAR   NOT NULL,
        status     VARCHAR   NOT NULL,
        created_by UUID      NOT NULL,
        started_at TIMESTAMP NOT NULL,
        ended_at   TIMESTAMP NOT NULL,
        created_at TIMESTAMP NOT NULL DEFAULT NOW(),
        updated_at TIMESTAMP NOT NULL DEFAULT NOW(),
        PRIMARY KEY (uuid)
    );

    CREATE TRIGGER update_tasks_updated_at
        BEFORE UPDATE
        ON tasks
        FOR EACH ROW
    EXECUTE FUNCTION update_updated_at();

  000002_init_tasks.down.sql: |
    DROP TRIGGER IF EXISTS update_tasks_updated_at ON tasks;
    DROP TABLE IF EXISTS tasks;

  000003_seed_admin_account.up.sql: |
    INSERT INTO accounts (login, password)
    VALUES ('admin', '68736532303235d033e22ae348aeb5660fc2140aec35850c4da997');

  000003_seed_admin_account.down.sql: |
    SELECT * from accounts;
